// Generated by CoffeeScript 1.3.3
(function() {
  var isEqualDom, trim;

  if (typeof module !== "undefined" && module !== null ? module.exports : void 0) {
    global.document = require('jsdom/lib/jsdom').jsdom("<!DOCTYPE html>\n<html>\n  <head>\n  </head>\n  <body>\n  </body>\n</html>");
    global.window = document.createWindow();
    global.jQuery = global.$ = require('jquery').create(window);
  }

  trim = function(text) {
    return text.replace(/\s/g, '').toLowerCase();
  };

  isEqualDom = function(actual, expected) {
    var actualChildren, attribute, child, i, _i, _j, _len, _len1, _ref, _ref1, _results;
    if (trim(actual.text()) !== trim(expected.text())) {
      throw new Error("ERROR: '" + (actual.text()) + "' is not equal to '" + (expected.text()) + "'");
    }
    _ref = expected[0].attributes;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      attribute = _ref[_i];
      if (actual.attr(attribute.name) !== expected.attr(attribute.name)) {
        throw new Error("ERROR: '" + attribute.name + "=\"" + (actual.attr(attribute.name)) + "\"' is not equal to '" + attribute.name + "=\"" + (expected.attr(attribute.name)) + "\"'");
      }
    }
    actualChildren = actual.children();
    _ref1 = expected.children();
    _results = [];
    for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {
      child = _ref1[i];
      _results.push(isEqualDom($(actualChildren[i]), $(child)));
    }
    return _results;
  };

  beforeEach(function() {
    return this.addMatchers({
      toBeEqual: function(expected) {
        var message;
        message = '\n' + this.actual.html() + '\n' + expected.html();
        this.message = function() {
          return message;
        };
        try {
          isEqualDom(this.actual, expected);
        } catch (error) {
          message += '\n' + error.message;
          return false;
        }
        return true;
      }
    });
  });

}).call(this);
