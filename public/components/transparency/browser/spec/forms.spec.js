// Generated by CoffeeScript 1.3.3
(function() {
  var Transparency;

  if (typeof module !== "undefined" && module !== null ? module.exports : void 0) {
    require('./spec_helper');
    Transparency = require('../src/transparency');
  }

  describe("Transparency", function() {
    it("should render values to form inputs and textarea elements", function() {
      var data, expected, template;
      template = $("<div>\n  <input name=\"name\"/>\n  <input name=\"job\"/>\n  <textarea name=\"resume\"></textarea>\n</div>");
      data = {
        name: 'John',
        job: 'Milkman',
        resume: "Jack of all trades"
      };
      expected = $("<div>\n  <input name=\"name\" value=\"John\"/>\n  <input name=\"job\" value=\"Milkman\"/>\n  <textarea name=\"resume\">Jack of all trades</textarea>\n</div>");
      template.render(data);
      return expect(template).toBeEqual(expected);
    });
    it("should render values to option elements", function() {
      var data, directives, expected, template;
      template = $("<select id=\"states\">\n  <option class=\"state\"></option>\n</select>");
      data = [
        {
          id: 1,
          state: 'Alabama'
        }, {
          id: 2,
          state: 'Alaska'
        }, {
          id: 3,
          state: 'Arizona'
        }
      ];
      directives = {
        state: {
          value: function() {
            return this.id;
          }
        }
      };
      expected = $("<select id=\"states\">\n  <option class=\"state\" value=\"1\" selected=\"selected\">Alabama</option>\n  <option class=\"state\" value=\"2\">Alaska</option>\n  <option class=\"state\" value=\"3\">Arizona</option>\n</select>");
      template.render(data, directives);
      template.children().first().prop('selected', true);
      return expect(template).toBeEqual(expected);
    });
    it("should set the matching option to 'selected' in case the target element is 'select'", function() {
      var data, expected, template;
      template = $("<div>\n  <select class=\"state\">\n    <option value=\"1\">Alabama</option>\n    <option value=\"2\">Alaska</option>\n    <option value=\"3\">Arizona</option>\n  </select>\n</div>");
      data = {
        state: 2
      };
      expected = $("<div>\n  <select class=\"state\">\n    <option value=\"1\">Alabama</option>\n    <option value=\"2\" selected=\"selected\">Alaska</option>\n    <option value=\"3\">Arizona</option>\n  </select>\n</div>");
      template.render(data);
      return expect(template).toBeEqual(expected);
    });
    return it("should handle nested options elements", function() {
      var data, expected, template;
      template = $("<div class=\"container\">\n  <h1 class=\"title\"></h1>\n  <p class=\"post\"></p>\n  <select class=\"comments\">\n    <option class=\"comment\">test</option>\n  </select>\n</div>");
      data = {
        title: 'Hello World',
        post: 'Hi there it is me',
        comments: [
          {
            comment: 'John'
          }, {
            comment: 'Arnold'
          }
        ]
      };
      expected = $("<div class=\"container\">\n  <h1 class=\"title\">Hello World</h1>\n  <p class=\"post\">Hi there it is me</p>\n  <select class=\"comments\">\n    <option class=\"comment\" selected=\"selected\">John</option>\n    <option class=\"comment\">Arnold</option>\n  </select>\n</div>");
      template.render(data);
      template.find(".comment").first().attr('selected', 'selected');
      return expect(template).toBeEqual(expected);
    });
  });

}).call(this);
